import React from 'react'import {useState} from 'react'import ReactDOM from 'react-dom/client'//import App from './App.jsx'import '/css/style.css'import { useMemo } from 'react';const Header = (props) => {	return (		<header>		<h1>{props.title}</h1>		<span className="total-items">Items: {props.itemTotal}</span>		<button className="add-item" onClick={() => props.getNewProduct()}>ADD</button>		</header>	)}const Item = (props) => {	return (		<div className={"item " + (props.sortCategory!="All" ? props.category==props.sortCategory ? 'show' : 'hidden' : "show")}>			<button className="remove-item" onClick={() => props.removeItem(props.id)} />			<div className="naming">			<span className="item-name">{props.name}</span>			<span className="category">{props.category}</span>			</div>			<Counter updateItemQuantity={props.updateItemQuantity} id={props.id} quantity={props.quantity}/>			<Price price={props.price} updateItemPrice={props.updateItemPrice} id={props.id}/>		</div>	)}const Price = (props) => {	const [price, setPrice] = useState(props.price);	return (		<input 		min="0"		className="price" 		defaultValue={price} 		onChange={e => {props.updateItemPrice(props.id, e.target.value); setPrice(e.target.value)}}		onKeyPress={(e) => {        if (!/^[0-9.]+$/.test(e.key)) {          e.preventDefault();        }      }} />		)}const Counter = (props) => {	const [quantity, setQuantity] = useState(props.quantity);	const incrementQuantity = () => {		const newQuantity = quantity + 1;		setQuantity(newQuantity);		props.updateItemQuantity(props.id, newQuantity);	}	const decrementQuantity = () => {		if (quantity > 0) {			const newQuantity = quantity - 1;			setQuantity(newQuantity);			props.updateItemQuantity(props.id, newQuantity);		}	}	return (		<div className="quantity">			<span className="qty-label">QTY</span>			<button className="increment" onClick={incrementQuantity}>+</button>			<button className="decrement" onClick={decrementQuantity}>-</button>			<span className="quantity-amount">{quantity}</span>		</div>	)}const Dropdown = (props) => {	const [chosenCategory, setChosenCategory] = useState(props.categories[0]);		const handleChange = (sortCategory) => {		props.updateSortCategory(sortCategory);		console.log(sortCategory);	}  return (    <div>      <label className="mt-4">Categories:</label>                <select onChange={e => {handleChange(e.target.value); setChosenCategory(e.target.value)}}>              {(props.categories).map((category) => (                  <option key={category} value={category}>{category}</option>              ))}            </select>    </div>  );};const App = () => {	const [items, setItems] = useState([	{		name: "Apples",		id: 1,		quantity: 2,		price: 3,		category: "Fruits"	},	{		name: "Bananas",		id: 2,		quantity: 3,		price: 4,		category: "Fruits"	},	{		name: "Box of Pasta",		id: 3,		quantity: 5,		price: 10,		category: "Important"	},	{		name: "Cookies",		id: 4,		quantity: 1,		price: 90,		category: "Junk"	},	{		name: "Peaches",		id: 5,		quantity: 2,		price: 15,		category: "Fruits"	}]);	const [categories, setCategories] = useState(			["All", "Fruits", "Important", "Vegetables", "Junk", "Drinks" ]);	const [sortCategory, setSortCategory] = useState(categories[0]);	const updateItemQuantity = (id, quantity) => {		setItems(prevItems =>			prevItems.map(item =>				item.id === id ? { ...item, quantity: quantity } : item			)		);	};	const updateSortCategory = (newSortCategory) => {		setSortCategory(newSortCategory);	}	const updateItemPrice = (id, price) => {		setItems (prevItems => 			prevItems.map(item =>				price>=0 ? (item.id===id ? {...item, price: price} : item) : item.id===id ? {...item, price: 0} : item			)		);	}    const removeItem = (id) => {    	setItems(prevItems => prevItems.filter(i => i.id !== id))	}	const getNewProduct = () => {		const name = prompt('Please enter new item:');		const category = prompt('Please enter category:');		const price = parseFloat(prompt('Please enter price:'));		//if (typeof price)		addItem(name, category, price);	}	const addItem = (name, category, price) => {		let id;		items.length ? id=items[items.length-1].id + 1 : id=1;		console.log(items.length);		console.log(id);		setItems(items.concat({name: name, id:id, quantity: 1, category: category, price: price}));		!(categories.includes(category)) ? setCategories(categories.concat(category)) : "" ;	}	const totalItems = (items) => {		const r=items.map(item => item.quantity);		console.log(r);		console.log(items);		const initialValue=0;		const allItems = r.reduce(		  (accumulator, currentValue) => accumulator + currentValue,		  initialValue,		);		console.log(allItems);		return(allItems);	}	const totalPrice = (items) => {		const initialValue=0;		const totalPrice=items.reduce((sum, item) => sum + item.quantity*item.price, initialValue);		return(totalPrice);	}	const Search = (props) => {		return (			<div className="search">			<label>Search:</label>				<input				type="text"				value={props.searchTerm}				onChange={e=>props.updateSearchTerm(searchTerm)}				/>			</div>			)	}	const Footer = (props) => {	return (		<footer>		<h1>{props.title}</h1>		<span className="total-items">Items: {props.totalItems(items)}</span>		<span className="total-price">Price: Â£{props.totalPrice(items)}</span>		</footer>		)	}	return (		<div className="grocery-list">			<Header 				title="Grocery List" 				itemTotal={items.length}				getNewProduct={getNewProduct} />			{/*Grocery List */}			{items.map(item => 				<Item 				name={item.name}				price={item.price}				id={item.id}				removeItem={removeItem}				key={item.id}				sortCategory={sortCategory}				quantity={item.quantity}				category={item.category}				updateItemQuantity={updateItemQuantity}				updateItemPrice={updateItemPrice}/>				)}			<Footer			title="All items"			totalItems={totalItems}			totalPrice={totalPrice}			/>			<Dropdown categories={categories} updateSortCategory={updateSortCategory}/>		</div>	)}ReactDOM.createRoot(document.getElementById('root')).render(  <React.StrictMode>    <App />  </React.StrictMode>,)